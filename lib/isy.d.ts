import { Client } from 'faye-websocket';
import { InsteonBaseDevice, InsteonDimmerSwitchDevice, InsteonDoorWindowSensorDevice, InsteonFanDevice, InsteonLockDevice, InsteonMotionSensorDevice, InsteonOutletDevice, InsteonRelayDevice, InsteonSwitchDevice, InsteonThermostatDevice, InsteonDimmableDevice } from './insteondevice';
import { Categories, DeviceTypes, Families, States, NodeTypes, Props } from './isyconstants';
import { ISYNode } from './isynode';
import { ISYDevice } from './isydevice';
import { ISYScene } from './isyscene';
import { ISYVariable } from './isyvariable';
import { ElkAlarmSensorDevice, ELKAlarmPanelDevice } from './elkdevice';
export { ISYScene, States, Families, DeviceTypes, Categories, Props, ISYVariable, InsteonBaseDevice, InsteonOutletDevice, ISYDevice, InsteonDimmableDevice, InsteonFanDevice, InsteonLockDevice, InsteonThermostatDevice, InsteonDoorWindowSensorDevice, InsteonSwitchDevice, InsteonDimmerSwitchDevice, InsteonRelayDevice, InsteonMotionSensorDevice, ISYNode, NodeTypes, ElkAlarmSensorDevice, ELKAlarmPanelDevice };
export declare let Controls: {};
export declare class ISY {
    readonly deviceList: Map<string, ISYDevice>;
    readonly deviceMap: Map<string, string[]>;
    readonly sceneList: Map<string, ISYScene>;
    webSocket: Client;
    zoneMap: any;
    protocol: any;
    address: any;
    restlerOptions: any;
    userName: any;
    password: any;
    credentials: {
        username: string;
        password: string;
    };
    variableList: any[];
    variableIndex: {};
    variableCallback: any;
    nodesLoaded: boolean;
    wsprotocol: string;
    elkEnabled: any;
    debugLogEnabled: any;
    scenesInDeviceList: any;
    guardianTimer: any;
    elkAlarmPanel: ELKAlarmPanelDevice;
    changeCallback: any;
    log: (msg: any) => void;
    logger: (msg: any) => void;
    lastActivity: any;
    constructor(address: any, username: any, password: any, elkEnabled: any, changeCallback: any, useHttps: any, scenesInDeviceList: any, enableDebugLogging: any, variableCallback: any, log: any);
    buildDeviceInfoRecord(isyType: any, connectionType: any, deviceType: any): {
        type: any;
        address: string;
        name: string;
        deviceType: any;
        connectionType: any;
        batteryOperated: boolean;
    };
    isyTypeToTypeName(isyType: any, address: any): {
        "type": string;
        "address": string;
        "name": string;
        "deviceType": string;
        "connectionType": string;
        "batteryOperated": boolean;
    };
    callISY(url: any): Promise<any>;
    getDeviceTypeBasedOnISYTable(deviceNode: any): {
        type: any;
        address: string;
        name: string;
        deviceType: any;
        connectionType: any;
        batteryOperated: boolean;
    };
    nodeChangedHandler(node: any, propertyName?: any): void;
    getElkAlarmPanel(): ELKAlarmPanelDevice;
    loadNodes(): Promise<void>;
    loadScenes(result: any): void;
    loadDevices(obj: any): void;
    loadElkNodes(result: any): void;
    loadElkInitialStatus(result: any): void;
    finishInitialize(success: any, initializeCompleted: any): void;
    guardian(): void;
    variableChangedHandler(variable: any): void;
    checkForFailure(response: any): boolean;
    loadVariables(type: any, done: any): void;
    loadConfig(): Promise<void>;
    getVariableList(): any[];
    getVariable(type: any, id: any): any;
    handleISYVariableUpdate(id: any, type: any, value: any, ts: any): void;
    createVariableKey(type: any, id: any): string;
    createVariables(type: any, result: any): void;
    setVariableValues(result: any): void;
    getNodeDetail(device: any, callback: any): void;
    refreshStatuses(): Promise<void>;
    initialize(initializeCompleted: any): void;
    handleWebSocketMessage(event: any): void;
    initializeWebSocket(): void;
    getDevice(address: string, parentsOnly?: boolean): any;
    getScene(address: any): any;
    sendISYCommand(path: any): Promise<any>;
    sendNodeCommand(node: ISYNode, command: String, ...parameters: any[]): Promise<any>;
    sendGetVariable(id: any, type: any, handleResult: any): void;
    sendSetVariable(id: any, type: any, value: any, handleResult: any): void;
}
